#!/usr/bin/env bash

set -euo pipefail

should_run=
version=
to_remove=
golangci_lint_config_yaml=
golangci_binaries_dir=$HOME/.golangci-lint
golangci_binary_dir=$HOME/bin
current_version_file="$golangci_binaries_dir/.version"

__usage() {
  echo "gclv - goalngci-lint version"
  echo ""
  echo "Select which version of golangci-lint to use. If a configuration YAML"
  echo "file is specified the version will be derived from ther."
  echo ""
  echo "  -h | --help          | Print this help"
  echo "  -v | --version       | Print the currently selected version"
  echo "  -i | --installed     | Print all installed versions"
  echo "  --select <version>   | Select a version to use."
  echo "                       |   Will download version if not found locally."
  echo "                       |   Set to 'latest' to download latest version"
  echo "  --from-config <file> | Select a version to use from golangci-lint config."
  echo "                       |   Will download version if not found locally."
  echo "  --remove <version>   | Remove an installed version."
  echo "  --run                | Run golangci-lint after chaning version from config."
  echo "  --binary-dir         | Where to link golangci-lint binary."
  echo "                       |  Default $HOME/bin."

  exit 0
}

__get_version_from_config() {
  if [ ! -f "$golangci_lint_config_yaml" ]; then
    echo >&2 "'$golangci_lint_config_yaml' was not found - chose an existing file"
    exit 1
  fi

  awk -F':' '/golangci-lint-version:/ {print $2}' \
    "$golangci_lint_config_yaml" | tr -d ' '
}

__get_current_version() {
  if [ ! -f "$current_version_file" ]; then
    touch "$current_version_file"
  fi

  cat "$current_version_file"
}

__print_installed() {
  current_version="$(__get_current_version)"
  if [ "$current_version" = "" ]; then
    echo "No version currently installed!"
    echo "Use --select to select a version to install"
    exit 1
  fi

  for f in "$golangci_binaries_dir"/golangci-lint*; do
    version=$(basename "${f/*-/}")

    if [ "$version" = "$current_version" ]; then
      echo "* $version"
    else
      echo "  $version"
    fi
  done

  exit 0
}

__download_golangci_binary() {
  curl -sSfL \
    https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
    sh -s -- -b "$golangci_binaries_dir" "$version"

  mv "$golangci_binaries_dir/golangci-lint" "$golangci_binaries_dir/golangci-lint-$version"
}

__link_binary() {
  if [ ! -f "$golangci_binaries_dir/golangci-lint-$version" ]; then
    echo "$version was not found - downloading"
    __download_golangci_binary
  fi

  echo "Switching to $version"

  if [ ! -d "$golangci_binary_dir" ]; then
    mkdir -p "$golangci_binary_dir"
  fi

  rm -f "$golangci_binary_dir/golangci-lint"
  ln -s "$golangci_binaries_dir/golangci-lint-$version" "$golangci_binary_dir/golangci-lint"

  echo "$version" >"$current_version_file"
}

__remove_binary() {
  if [ ! -f "$golangci_binaries_dir/golangci-lint-$to_remove" ]; then
    echo >&2 "$to_remove was not found - nothing to remove"
    exit 1
  fi

  if [ "$to_remove" = "$(__get_current_version)" ]; then
    echo >&2 "$to_remove is set to current active version."
    echo >&2 "Change version before removing it"

    exit 1
  fi

  rm "$golangci_binaries_dir/golangci-lint-$to_remove"
  echo "Removed $to_remove"
}

__set_golangci_yaml_from_arguments() {
  argumnets_length=$#
  # Iterate over all remaining arguments to see if we find the `--config` flag.
  for ((i = 1; i <= "$argumnets_length"; i++)); do
    case "${!i}" in
      # Check if the argument starts with `--config`.
      --config*)
        # If removing any `=` from the argument ends up with an unchanged value,
        # the actual value is in the next position (`--config foo`). If so,
        # increment index to reach next item.
        if [ "${!i/=/}" = "${!i}" ]; then
          i=$((i + 1))
        fi

        # Take the value at the current index after the last `=`. If the value
        # is `--config=foo` it will be `foo`, if the value is just `foo` it will
        # still be just foo.
        golangci_lint_config_yaml="${!i/*=/}"
        break
        ;;
    esac
  done

  # Use `golangci-lint` to get config file.
  if [ -z "$golangci_lint_config_yaml" ]; then
    if ! golangci-lint --version >/dev/null 2>&1; then
      echo >&2 "Ensure you have any valid version of \`golangci-lint\` in PATH"
      echo >&2 "when trying to find default \`golangci-lint\` config file."

      exit 1
    fi

    golangci_lint_config_yaml=$(golangci-lint config path)
  fi
}

# Print help text if there are no arguments, we need at least the .golangci.yaml
# file to know which version to switch to.
if [ $# -eq 0 ]; then
  __usage
fi

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      __usage
      ;;
    -v|--version)
      __get_current_version
      exit 0
      ;;
    -i|--installed)
      __print_installed
      ;;
    --select*)
      if [ "${1/=/}" = "$1" ]; then
        shift
      fi

      if [ -z "${1:-}" ]; then
        echo "Missing version"
        break
      fi

      version="${1/*=/}"
      shift
      ;;
    --from-config*)
      if [ "${1/=/}" = "$1" ]; then
        shift
      fi

      if [ -z "${1:-}" ]; then
        echo "Missing config file"
        break
      fi

      golangci_lint_config_yaml="${1/*=/}"
      shift
      ;;
    --remove*)
      if [ "${1/=/}" = "$1" ]; then
        shift
      fi

      if [ -z "${1:-}" ]; then
        echo "Missing version to remove as argument"
        echo ""
        __usage
      fi

      to_remove="${1/*=/}"
      shift
      ;;
    --binary-dir*)
      if [ "${1/=/}" = "$1" ]; then
        shift
      fi

      if [ -z "${1:-}" ]; then
        echo "Missing directory"
        break
      fi

      golangci_binary_dir="${1/*=/}"
      shift
      ;;
    --run)
      should_run="${1/*=/}"
      shift

      # We break out and assume that the rest of the arguments are for
      # `golangci-lint`.
      break
      ;;
    *)
      echo "Unknown flag '$1'"
      echo ""
      __usage
      ;;
  esac
done

# Ensure we have a place to put our binaries and current version tracking.
if [ ! -d "$golangci_binaries_dir" ]; then
  mkdir -p "$golangci_binaries_dir"
fi

# If we should run `golangci-lint`, ensure we know where to get the version
# from.
if [ -n "$should_run" ]; then
  __set_golangci_yaml_from_arguments "$@"
fi

# Re-link binary if we have a potential version change.
if [ -n "$version" ] || [ -n "$golangci_lint_config_yaml" ]; then
  if [ -z "$version" ]; then
    version=$(__get_version_from_config)
  fi

  if [ "$version" = "latest" ]; then
    version=$(
      curl -s \
        https://api.github.com/repos/golangci/golangci-lint/releases/latest \
        | awk '/^ +"name": "v/ {print $2}' \
        | tr -d '",'
      )

    echo "Version 'latest' currently corresponds to $version"
  fi

  # Ensure we now have a version before trying to compare and link. We might not
  # have a version if someone is using `--run` and a config file is used which
  # doesn't contain a version declaration. If so, just move on and run whatever
  # currently selected `golangci-lint` version is.
  if [ -n "$version" ]; then
    # Re-link if we're not running the desired version.
    if ! [ "$version" = "$(__get_current_version)" ]; then
      __link_binary
    fi

    # If we're not about to run `golangci-lint`, just exit, nothing to do.
    if [ -z "$should_run" ]; then
      exit 0
    fi
  fi
fi

# Remove binary if we set to_remove.
if [ -n "$to_remove" ]; then
  __remove_binary
fi

# We figured out a version to use, we've switched version if we needed to so now
# just run `golangci-lint`. Let's assume the PATH `gclv` operates on is first in
# `PATH` so we just run the `golangci-lint` binary. If not, this tool is useless
# anyways.
if [ -n "$should_run" ]; then
  golangci-lint run "$@"
fi

# vim: set ts=2 sw=2 et:
